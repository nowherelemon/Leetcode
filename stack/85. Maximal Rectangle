/*

Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

Example:

Input:
[
  ["1","0","1","0","0"],
  ["1","0","1","1","1"],
  ["1","1","1","1","1"],
  ["1","0","0","1","0"]
]
Output: 6

*/


class Solution {
    public int maximalRectangle(char[][] matrix) {
        if (matrix.length < 1 || matrix[0].length < 1) return 0;
        int[] heights = new int[matrix[0].length];
        int max = 0;
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                if (matrix[i][j] == '1') {
                    heights[j]++;
                } else {
                    heights[j] = 0;
                }
            }
            max = Math.max(max, largestRectangleArea(heights));
        }
        return max;
    }
    
    public int largestRectangleArea(int[] heights) {
        if (heights == null || heights.length < 1) return 0;
        Stack<Integer> st = new Stack<> ();
        int max = 0;
        for (int i = 0; i <= heights.length; i++) {
            int h = 0;
            if (i < heights.length) {
                h = heights[i];
            }
            
            if (st.isEmpty() || h >= heights[st.peek()]) {
                st.push(i);
            } else {
                int index = st.pop();
                max = Math.max(max, (st.isEmpty() ? i : i - st.peek() - 1) * heights[index]);
                i--;
            }
        }
        return max;
    }
}
