//Given a string that consists of only uppercase English letters, you can replace any letter in the string with another letter at most k times. Find the length of a longest substring containing all repeating letters you can get after performing the above operations.

//For this problem, we just need to know during the sliding windows, what's the maximal count of a character meeting the criteria

class Solution {
    public int characterReplacement(String s, int k) {
        int[] ct = new int[26];
        int j = 0;
        int maxCount = 0;
        int max = 0;
        char[] arr = s.toCharArray();
        for (int i = 0; i < arr.length; i++) {
            maxCount = Math.max(maxCount, ++ct[arr[i] - 'A']);
            if (i - j + 1 - maxCount > k) {
                ct[arr[j] - 'A']--;
                j++;
            }
            max = Math.max(max, i - j + 1);
        }
        return max;
    }
}
